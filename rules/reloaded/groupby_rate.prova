% Every 25 milliseconds, output a map with counts of events grouped by a value. 
% This test can only be run from ProvaMetadata.java as it requires an AtomicLong count passed a global constant.

:- eval(groupby_rate()).

groupby_rate() :-
	println(["==========Groupby rate test=========="]),

	Counter = org.provarules.eventing.MapCounter(),
	% This reaction operates indefinitely. When the timer elapses,
	%   the groupby map Counter is sent as part of the result,
	%   and the timer is reset back to the second argument of @timer.
	@group(g1) @timer(25,25,Counter)
	rcvMsg(XID,self,From,inform,a(I)) [IM=I mod 5,Counter.incrementAt(IM)],
	println(["Received: ",rcvMsg(XID,self,From,inform,a(I))],"").
groupby_rate() :-
	% This reaction is matched each time every 25 milliseconds with a new result
	@or(g1)
	rcvMsg(XID,self,From,or,[Results]),
	% The first element of the results is the Counter map
	Counter = Results.get(0),
	Delta = Counter.totalCount(),
	$Count.addAndGet(Delta),
	println(["Pattern detected: ",Results]).
